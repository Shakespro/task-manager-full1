[{"C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\index.js":"1","C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\App.js":"3","C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\components\\Modal.js":"4"},{"size":583,"mtime":1699593621270,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1697863461162,"results":"7","hashOfConfig":"6"},{"size":3902,"mtime":1699744508526,"results":"8","hashOfConfig":"6"},{"size":2692,"mtime":1699591221472,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sdnki3",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\index.js",[],[],"C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\reportWebVitals.js",[],[],"C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\App.js",["23","24"],[],"import React, { Component } from 'react';\nimport Modal from './components/Modal';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      viewCompleted: false,\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false\n    },\n    taskList: []   \n  };\n}\n\ncomponentDidMount() {\n  this.refreshList();\n}\n\nrefreshList = () => {\n  axios\n    .get(\"http://localhost:8000/api/tasks/\")\n    .then(res => this.setState({ taskList: res.data }))\n    .catch(err => console.log(err));\n};\n\ndisplayCompleted = status => {\n  \n  if (status) {\n    return this.setState({ viewCompleted: true });\n  }\n  return this.setState({ viewCompleted: false });\n};\n\nrenderTabList = () => {\n  return (\n    <div className=\"my-5 tab-list\">\n      <span\n        onClick={() => this.displayCompleted(true)}\n        className={this.state.viewCompleted ? \"active\" : \"\"}\n      >\n        Completed\n      </span>\n      <span\n        onClick={() => this.displayCompleted(false)}\n        className={this.state.viewCompleted ? \"\" : \"active\"}\n      >\n        Incomplete\n      </span>\n    </div>\n  );\n};\n\n// REndering items in the list ( compl || incopmlete )\nrenderItems = () => {\n  const{ viewCompleted } = this.state;\n  const newItems = this.state.taskList.filter(\n    item => item.completed == viewCompleted\n  );\n\nreturn newItems.map(item => (\n  <li\n    key={item.id}\n    className=\"list-group-item d-flex justify-content-between \n    align-items-center\">\n    <span className={`todo-title mr-2 ${this.state.viewCompleted ? \"completed-todo\" : \"\" }`}\n      title={item.title}>\n      {item.title}\n    </span>\n    <span>\n      <button  onClick={() => this.editItem(item)} className=\"btn btn-info mr-2\"> Edit </button>\n      <button onClick={() => this.handleDelete(item)} className=\"btn btn-danger mr-2\">Delete</button>\n    </span>\n  </li>\n  ));\n};  \n\n\n//create toggle property\ntoggle = () => {\n  this.setState({ modal: !this.state.modal });\n};\n\nhandleSubmit = item => {\n  this.toggle();\n  if (item.id) {\n    axios\n      .put(`http://localhost:8000/api/tasks/${item.id}/`, item)\n      .then(res => this.refreshList());\n  }\n  axios\n  .post(\"http://localhost:8000/api/tasks/\", item)\n  .then(res => this.refreshList());\n};\n\nhandleDelete = item => {\n  axios\n  .delete(`http://localhost:8000/api/tasks/${item.id}/`, item)\n  .then(res => this.refreshList());\n};\n\ncreateItem = () => {\n  const item = { title: \"\", description: \"\", completed: false };\n  this.setState({ activeItem: item, modal: !this.state.modal });\n};\n\neditItem = item => {\n  this.setState({ activeItem: item, modal: !this.state.modal });\n};\n\n\n\nrender() {\n  return ( \n    <main className=\"content p-3 mb-2 bg-danger\">\n      <h1 className=\"text-white text-uppercase text-center my-4\" id=\"finese\">Titan Task Manager</h1>\n      <div className=\"center\">\n        <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n          <div className=\"card p-3\">\n            <div className=\"center\">\n              <button onClick={this.createItem} className=\"btn btn-primary\">Add task</button>\n              <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRFAdnvHXXiw1c4Bx7dflm76JJheOBq03_Alw&usqp=CAU\" width=\"10%\"/>\n            </div>\n            <div className=\"center\">\n            {this.renderTabList()}\n            </div>\n            <ul className=\"list-group list-group-flush\">\n              {this.renderItems()}\n  \n            </ul>\n          </div>\n        </div>\n      </div>\n      <footer className=\"my-5 mb-2 bg-danger text-white text-center\">Sakhile Design Titans Copyright \n      2023 &copy; All rights reserved</footer>\n      {this.state.modal ? (\n        <Modal\n          activeItem={this.state.activeItem}\n          toggle={this.toggle}\n          onSave={this.handleSubmit}\n        />\n      ) : null}\n    </main>\n  )\n}};\n\nexport default App;\n","C:\\Users\\sfihl\\Documents\\code\\django-react-app\\frontend\\src\\components\\Modal.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":63,"column":28,"nodeType":"27","messageId":"28","endLine":63,"endColumn":30},{"ruleId":"29","severity":1,"message":"30","line":127,"column":15,"nodeType":"31","endLine":127,"endColumn":139},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]